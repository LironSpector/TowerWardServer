// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TowerWardServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250118160930_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Models.GameSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FinalWave")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TimePlayed")
                        .HasColumnType("int");

                    b.Property<int?>("User1Id")
                        .HasColumnType("int");

                    b.Property<int?>("User2Id")
                        .HasColumnType("int");

                    b.Property<int?>("WonUserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("game_sessions", (string)null);
                });

            modelBuilder.Entity("Models.GlobalGameStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("TotalGamesPlayed")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalMultiplayerGames")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSingleplayerGames")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalUsers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("global_game_stats", (string)null);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Models.UserGameStats", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("GamesWon")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MultiplayerGames")
                        .HasColumnType("int");

                    b.Property<int>("SinglePlayerGames")
                        .HasColumnType("int");

                    b.Property<int>("TotalTimePlayed")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("user_game_stats", (string)null);
                });

            modelBuilder.Entity("Models.GameSession", b =>
                {
                    b.HasOne("Models.User", "User1")
                        .WithMany("GameSessionsAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.User", "User2")
                        .WithMany("GameSessionsAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Models.UserGameStats", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithOne("UserGameStats")
                        .HasForeignKey("Models.UserGameStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("GameSessionsAsUser1");

                    b.Navigation("GameSessionsAsUser2");

                    b.Navigation("UserGameStats")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
